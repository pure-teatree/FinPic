Vue를 VSC 상에서 사용하고 Spring Boot와 연동하여 사용할 때 CORS를 피하기 위해 필요한 코드들

1. At main.js

const storage = window.sessionStorage;
axios.defaults.headers.common["jwt-auth-token"] = storage.getItem("jwt-auth-token");

이는 axios request header에 접근할 수 있게 해주는 코드
의미는 모든 요청이 발생할 때 "jwt-auth-token"라는 헤더 키에 sessionStorage에 있는 "jwt-auth-token" 키에 해당된 값을 받아 대입한다는 뜻
axios.post(url, headers : {
	something
}
같은 형태로는 axios가 알아먹질 못하고 request header 에 추가할 수 가 없다


2. At RunApp.java in Spirng Boot

	//CORS(Cross-Origin Resource Sharing)
	//웹 브라우저에서 외부 도메인 서버와 통신하기 위한 방식을 표준화한 스펙
	@Override
	public void addCorsMappings(CorsRegistry registry) {
		System.out.println("addCorsMappings() --");
		registry.addMapping("/**")
		.allowedOrigins("*")
		.exposedHeaders("jwt-auth-token");
	}
에서 exposedHeaders 부분
이는 CORS 상에서 외부 브라우저에 response를 보낼 때 헤더에 추가하여 사용할 수 있도록 할 부분을 정하는 것이다

3. At Interceptor in Spring Boot 

		if (req.getMethod().equals("OPTIONS")) {
				return true;
		}
CORS가 일어나면 어떤 메소드(POST,GET,PUT,DELETE)로 요청을 보내든지 우선적으로 OPTIONS라는 메소드가 내부적으로 발생한다
이때 바로 true값을 반환하여 CORS 이슈 = 인증 성공 
과 같은 억지스러운 상태로 만들어 두는 것이다.
이는 CORS가 벌어질 수 있는 테스트 상황에서나 사용할 법한 코드인듯

4. 마지막으로 로그인 후 세션 스토리지에 토큰을 저장했다면 브라우저 내부에서 새로고침 혹은 리다이렉트가 한번 되어야 한다 
그래야 요청 헤더에 토큰을 넣고 보낼 수 있음
따라서 로그인 후 리다이렉션 필수로 만들자
